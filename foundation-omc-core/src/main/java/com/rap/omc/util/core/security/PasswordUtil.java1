package com.rap.omc.util.core.security;

import com.rap.omc.util.NullUtil;

/*     */
/*     */ public class PasswordUtil
/*     */ {

    /*     */ private static final String NUMBER_REGEX = "[0-9]";

    /*     */ private static final String LOWERCASE_REGEX = "[a-z]";

    /*     */ private static final String UPPERCASE_REGEX = "[A-Z]";

    /*     */ private static final String PUNCTUATION_REGEX = "\\p{Punct}";

    /*     */
    /*     */ public static boolean validateDenyStrings(String password, String denyStrings)
    /*     */ {
        /*  45 */ boolean ret = true;
        /*     */
        /*  47 */ if (!(NullUtil.isNone(denyStrings))) {
            /*  48 */ String[] denies = denyStrings.split("\\;");
            /*  49 */ for (int inx = 0; inx < denies.length; ++inx) {
                /*  50 */ if (password.indexOf(denies[inx]) > -1) {
                    /*  51 */ ret = false;
                    /*  52 */ break;
                    /*     */ }
                /*     */ }
            /*     */ }
        /*  56 */ return ret;
        /*     */ }

    /*     */
    /*     */ public static boolean validateLength(String password, int minLength, int maxLength)
    /*     */ {
        /*  70 */ boolean ret = false;
        /*     */
        /*  72 */ if ((minLength <= 0) && (maxLength <= 0))/*  73 */ ret = true;
        /*  74 */ else if (minLength <= 0) {
            /*  75 */ if (password.length() <= maxLength)/*  76 */ ret = true;
            /*     */ }
        /*  78 */ else if (maxLength <= 0) {
            /*  79 */ if (password.length() >= minLength)/*  80 */ ret = true;
            /*     */ }
        /*  82 */ else if (maxLength >= minLength) {
            /*  83 */ if ((password.length() >= minLength) && (password.length() <= maxLength))/*  84 */ ret = true;
            /*     */ }
        /*     */ else {
            /*  87 */ throw new IllegalArgumentException("Maxlength should be greater than minlength.");
            /*     */ }
        /*  89 */ return ret;
        /*     */ }

    /*     */
    /*     */ public static boolean validateRepeatedCharacterLength(String password, int repeatedCharacterLength)
    /*     */ {
        /* 100 */ boolean ret = true;
        /*     */
        /* 102 */ int passwordLength = password.length();
        /* 103 */ if (repeatedCharacterLength > 0)
        /*     */ {
            /*     */ char cha;
            /* 104 */ for (int inx = 0; inx < passwordLength; ++inx) {
                /* 105 */ cha = password.charAt(inx);
                /*     */
                /* 107 */ if (inx + repeatedCharacterLength <= passwordLength) {
                    /* 108 */ int count = 0;
                    /* 109 */ for (int jnx = inx + 1; jnx < inx + repeatedCharacterLength; ++jnx) {
                        /* 110 */ if (cha != password.charAt(jnx)) {
                            /* 111 */ inx = jnx - 1;
                            /* 112 */ break;
                            /*     */ }
                        /* 114 */ ++count;
                        /*     */ }
                    /* 116 */ if (count == repeatedCharacterLength - 1) {
                        /* 117 */ ret = false;
                        /* 118 */ break;
                        /*     */ }
                    /*     */ }
                /*     */ }
            /*     */ }
        /* 123 */ return ret;
        /*     */ }

    /*     */
    /*     */ public static boolean validateSequentialCharacterLength(String password, int sequentialCharacterLength)
/*     */   {
/* 135 */     boolean ret = true;
/*     */ 
/* 137 */     int order = 0;
/*     */ 
/* 139 */     int passwordLength = password.length();
/* 140 */     if (sequentialCharacterLength > 0) {
/* 141 */       for (int inx = 0; inx < passwordLength; ++inx) {
/* 142 */         char cha = password.charAt(inx);
/* 143 */         boolean isNumber = String.valueOf(cha).matches("[0-9]");
/* 144 */         boolean isLowercase = String.valueOf(cha).matches("[a-z]");
/* 145 */         boolean isUppercase = String.valueOf(cha).matches("[A-Z]");
/*     */ 
/* 147 */         if (((!(isNumber)) && (!(isLowercase)) && (!(isUppercase))) || 
/* 148 */           (inx + sequentialCharacterLength > passwordLength)) continue;
/* 149 */         int count = 0;
/* 150 */         for (int jnx = inx + 1; jnx < inx + sequentialCharacterLength; ++jnx) {
/* 151 */           if (order == 0) {
/* 152 */             if (cha == password.charAt(jnx) - '\1') {
/* 153 */               order = 1;
/* 154 */               break;
                         } if (cha == password.charAt(jnx) + '\1') {
/* 155 */               order = 2;
/* 156 */               break;
}
/* 157 */             inx = jnx - 1;
/* 158 */             break;
/*     */           }
/* 160 */           if (order == 1) {
/* 161 */             if (cha == password.charAt(jnx) - '\1') break;
/* 162 */             inx = jnx - 1;
/* 163 */             break;
/*     */           }
/* 165 */           if ((order == 2) && 
/* 166 */             (cha != password.charAt(jnx) + '\1')) {
/* 167 */             inx = jnx - 1;
/* 168 */             break;
/*     */           }
/*     */ 
/* 171 */           label233: ++count;
/* 172 */           cha = password.charAt(jnx);
/*     */         }
/* 174 */         if (count == sequentialCharacterLength - 1) {
/* 175 */           ret = false;
/* 176 */           break;
/*     */         }
/*     */       }
/*     */ 
/*     */     }
/*     */ 
/* 182 */     return ret;
/*     */   }

    /*     */
    /*     */ public static boolean validateIncludedCharacter(String password, boolean includesLowercase,
            boolean includeUppercase, boolean includeNumber, boolean includePunctuation)
    /*     */ {
        /* 261 */ boolean ret = false;
        /*     */
        /* 263 */ boolean lowercaseChecked = false;
        /* 264 */ boolean uppercaseChecked = false;
        /* 265 */ boolean numberChecked = false;
        /* 266 */ boolean punctuationChecked = false;
        /*     */
        /* 268 */ for (int inx = 0; inx < password.length(); ++inx) {
            /* 269 */ char character = password.charAt(inx);
            /*     */
            /* 271 */ if ((!(lowercaseChecked)) && (includesLowercase) && (String.valueOf(character).matches("[a-z]")))
                /* 272 */ lowercaseChecked = true;
            /* 273 */ else if ((!(uppercaseChecked)) && (includeUppercase) && (String.valueOf(character).matches("[A-Z]")))
                /* 274 */ uppercaseChecked = true;
            /* 275 */ else if ((!(numberChecked)) && (includeNumber) && (String.valueOf(character).matches("[0-9]")))
                /* 276 */ numberChecked = true;
            /* 277 */ else if ((!(punctuationChecked)) && (includePunctuation) && (String.valueOf(character).matches("\\p{Punct}"))) {
                /* 278 */ punctuationChecked = true;
                /*     */ }
            /*     */ }
        /*     */
        /* 282 */ boolean lowercaseResult = true;
        /* 283 */ if ((includesLowercase) && (!(lowercaseChecked))) lowercaseResult = false;
        /*     */
        /* 285 */ boolean uppercaseResult = true;
        /* 286 */ if ((includeUppercase) && (!(uppercaseChecked))) uppercaseResult = false;
        /*     */
        /* 288 */ boolean numberResult = true;
        /* 289 */ if ((includeNumber) && (!(numberChecked))) numberResult = false;
        /*     */
        /* 291 */ boolean punctuationResult = true;
        /* 292 */ if ((includePunctuation) && (!(punctuationChecked))) punctuationResult = false;
        /*     */
        /* 294 */ if ((lowercaseResult) && (uppercaseResult) && (numberResult) && (punctuationResult)) {
            /* 295 */ ret = true;
            /*     */ }
        /* 297 */ return ret;
        /*     */ }

    /*     */
    /*     */ public static boolean validateIncludedCharacterLength(String password, boolean includesLowercase,
            boolean includeUppercase, boolean includeNumber, boolean includePunctuation, int includedCharacterLength)
    /*     */ {
        /* 313 */ boolean ret = false;
        /*     */
        /* 315 */ int totalLength = 0;
        /* 316 */ int lowercaseLength = 0;
        /* 317 */ int uppercaseLength = 0;
        /* 318 */ int numberLength = 0;
        /* 319 */ int punctuationLength = 0;
        /*     */
        /* 321 */ int minLength = 0;
        /* 322 */ if (includesLowercase) ++minLength;
        /* 323 */ if (includeUppercase) ++minLength;
        /* 324 */ if (includeNumber) ++minLength;
        /* 325 */ if (includePunctuation) ++minLength;
        /*     */
        /* 327 */ if (includedCharacterLength < minLength) throw new IllegalArgumentException(
                "The value of includedCharacterLength parameter should be equal to or greater than " + minLength + ".");
        /*     */ char character;
        /* 329 */ for (int inx = 0; inx < password.length(); ++inx) {
            /* 330 */ character = password.charAt(inx);
            /*     */
            /* 332 */ if ((includesLowercase) && (String.valueOf(character).matches("[a-z]"))) {
                /* 333 */ ++totalLength;
                /* 334 */ ++lowercaseLength;
                /* 335 */ } else if ((includeUppercase) && (String.valueOf(character).matches("[A-Z]"))) {
                /* 336 */ ++totalLength;
                /* 337 */ ++uppercaseLength;
                /* 338 */ } else if ((includeNumber) && (String.valueOf(character).matches("[0-9]"))) {
                /* 339 */ ++totalLength;
                /* 340 */ ++numberLength;
                /* 341 */ } else if ((includePunctuation) && (String.valueOf(character).matches("\\p{Punct}"))) {
                /* 342 */ ++totalLength;
                /* 343 */ ++punctuationLength;
                /*     */ }
            /*     */
            /* 346 */ if (totalLength >= includedCharacterLength) {
                /* 347 */ boolean lowercaseResult = true;
                /* 348 */ if ((includesLowercase) && (lowercaseLength == 0)) lowercaseResult = false;
                /*     */
                /* 350 */ boolean uppercaseResult = true;
                /* 351 */ if ((includeUppercase) && (uppercaseLength == 0)) uppercaseResult = false;
                /*     */
                /* 353 */ boolean numberResult = true;
                /* 354 */ if ((includeNumber) && (numberLength == 0)) numberResult = false;
                /*     */
                /* 356 */ boolean punctuationResult = true;
                /* 357 */ if ((includePunctuation) && (punctuationLength == 0)) punctuationResult = false;
                /*     */
                /* 359 */ if ((lowercaseResult) && (uppercaseResult) && (numberResult) && (punctuationResult)) {
                    /* 360 */ ret = true;
                    /* 361 */ break;
                    /*     */ }
                /*     */ }
            /*     */ }
        /*     */
        /* 366 */ return ret;
        /*     */ }
    /*     */ }
