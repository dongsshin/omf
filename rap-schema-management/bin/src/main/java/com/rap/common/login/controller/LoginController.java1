/**
 * ===========================================
 * System Name : LGE GPDM
 * Program ID : LoginController.java
 * ===========================================
 * Modify Date Modifier Description
 * -------------------------------------------
 * 2014. 12. 9. hyeyoung.park Initial
 * ===========================================
 */
package com.rap.common.login.controller;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.support.SessionStatus;

import com.omc.framework.exception.ApplicationException;
import com.rap.common.login.LoginUtil;
import com.rap.common.login.model.UserInfoVO;
import com.rap.common.login.model.UserSession;
import com.rap.common.login.service.LoginService;
import com.rap.sample.util.Module01Constants;

/**
 * <pre>
 * Class : LoginController
 * Description : 로그인 처리를 담당하는 Controller
 * </pre>
 *
 * @author hyeyoung.park
 */
@Controller
public class LoginController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoginController.class);

    private static final String INVALID_URL = "common/login/loginValid";

    @Resource(name = "loginService")
    private LoginService loginService;

    @Resource(name = "loginAgent")
    private LoginAgent loginAgent;

    @RequestMapping(value = "/common/emergencyCheckNew.do")
    public String displayLoginForm(){
        return "common/login/loginForm";
    }

    @RequestMapping(value = "/common/loginAjax.do")
    public String loginAjax( UserInfoVO input, HttpSession session, ModelMap model ) {

        boolean isExistUser = loginService.checkUserId(input);
        boolean isValidUser = false;
        if (isExistUser) isValidUser = loginService.checkUser(input);
        
        if (isExistUser && isValidUser){
            loginCommonSub(input.getUserId());
            //session.setAttribute(PlmConstants.SESSION_USER_INFO, userSession);
            
        }
        if (!isExistUser || !isValidUser) {
            //session.removeAttribute(PlmConstants.SESSION_USER_INFO);
            throw new ApplicationException("com.error.login");
        }
        return Module01Constants.AJAX_VIEW;
    }
    /**
     * 로그아웃을 처리한다.
     *
     * @param model
     * @param session
     * @return
     */
    @RequestMapping(value = "/common/logout.do")
    public String logout(ModelMap model, HttpSession session, SessionStatus sessionStatus){
        if (sessionStatus != null) {
            sessionStatus.setComplete();
        }
        if (session != null) {
            session.invalidate();
        }
        return "common/login/loginForm";
    }
    
    private void loginCommonSub( String userId ) {
        loginCommonSub(userId, "Normal");
    }
    
    private void loginCommonSub( String userId, String loginType ) {
        LoginUtil.refreshUserSession(userId, loginType);
    }
    public static void setThreadLocalFromSession(UserSession userSession) {
        LoginUtil.refreshThreadLocalFromSession(userSession);
    }
}
